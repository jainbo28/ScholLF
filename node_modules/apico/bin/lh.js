#!/usr/bin/env node
const path = require('path');
const fs = require('fs-extra');
const { APP_ROOT_DIR, COMMAND } = require('../consts');

/**
 * @command init - Initialize the project structure.
 * @command app <app_anme> - Generate a new application
 * @command serve - Run a local server for testing.
 */


runCommand( COMMAND );

function init()
{

    let folders = ['frontend', 'locals', 'routes','middlewares'];

    folders.forEach(_f=>{
        // Source and destination paths
        let sourcePath = path.join( path.dirname( __dirname ), `/${_f}`);
        let destinationPath = `${APP_ROOT_DIR}/${_f}`;

        console.log(` sourcePath: ${sourcePath}  `);
        console.log( ` destinationPath : ${destinationPath} ` )
        // Use fs-extra to copy the folder
        fs.copy(sourcePath, destinationPath, (err) => {
            if (err) {
                console.error('Error copying folder:', err);
            } else {
                console.log('Folder successfully copied!');
            }
        });
        })
    
}


function generateApplication()
{
    let app_name = process.argv[3];
    
    let files = [
        { name:'index.ejs', content: `<h1> ${app_name} works!</h1>` },
        { name:'index.js', content: '// Your app JavaScript code.' },
        { name:'index.css', content: '/** Your app style. */' }
    ];


    files.forEach(_f=>{
        // Specify the file path
        const filePath = `${APP_ROOT_DIR}/frontend/dist/apps/${app_name}/${_f.name}`;

        // Using fs-extra's outputFile method to create the file
        fs.outputFile(filePath, _f.content, (err) => {
            if (err) {
                console.error('Error creating file:', err);
            } else {
                console.log('File created successfully!');
            }
        });
    })
    
}

function serve()
{

}


function runCommand( p_command )
{
    switch( p_command )
    {
        case 'init':
            init()
            break;
        case 'app':
            generateApplication()
            break;
        case 'serve':
            serve()
            break;
        default:
            invalidCommand()
    }
}